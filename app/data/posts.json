[
  {
    "id": "post-001",
    "slug": "designing-a-lightning-fast-nuxt-blog",
    "title": "Designing a Lightning-Fast Nuxt Blog",
    "excerpt": "Leverage Nuxt Image and static content to ship a blazing-fast reading experience.",
    "content": "# Building with Nuxt Image\\n\\nNuxt Image automatically optimizes media for every breakpoint so you can keep your blog pages light. Combine responsive placeholders with lazy loading to boost your Largest Contentful Paint.\\n\\n## Implementation checklist\\n\\n- Configure the static provider in `nuxt.config.ts`.\\n- Wrap PrimeVue cards with `NuxtImg` for thumbnails.\\n- Use Tailwind utility classes to lock aspect ratios and maintain a tidy grid.\\n\\n## What to monitor\\n\\nTrack CLS through the built-in Nuxt analytics module and ensure that your image sizes match the layout container.",
    "authorId": "author-001",
    "category": "Performance",
    "tags": [
      "Nuxt",
      "Performance",
      "Images"
    ],
    "publishedAt": "2025-09-18T09:30:00.000Z",
    "coverImage": "/images/posts/designing-a-lightning-fast-nuxt-blog/cover.jpg",
    "gallery": [
      "/images/posts/designing-a-lightning-fast-nuxt-blog/layout.png",
      "/images/posts/designing-a-lightning-fast-nuxt-blog/components.png"
    ]
  },
  {
    "id": "post-002",
    "slug": "crafting-ui-with-tailwind-and-primevue",
    "title": "Crafting UI with Tailwind and PrimeVue",
    "excerpt": "Blend utility-first styling with rich components for a cohesive blog design.",
    "content": "# Why Tailwind + PrimeVue\\n\\nTailwind handles the spacing, typography, and responsive rules while PrimeVue delivers polished interactions out of the box. Together they reduce design debt without sacrificing customization.\\n\\n## Layout tips\\n\\n1. Extend the Tailwind theme with PrimeVue tokens.\\n2. Use `Card`, `Tag`, and `Dialog` components to keep patterns consistent.\\n3. Layer subtle transitions with Tailwind's animation utilities to reinforce interactivity.",
    "authorId": "author-002",
    "category": "Design Systems",
    "tags": [
      "Tailwind CSS",
      "PrimeVue",
      "Design"
    ],
    "publishedAt": "2025-09-25T14:05:00.000Z",
    "coverImage": "/images/posts/crafting-ui-with-tailwind-and-primevue/cover.jpg"
  },
  {
    "id": "post-003",
    "slug": "content-workflows-with-local-json",
    "title": "Content Workflows with Local JSON",
    "excerpt": "Structure your Nuxt blog content using versioned JSON for faster iteration.",
    "content": "# Versioning content like code\\n\\nWith local JSON files you can review every copy change in pull requests. Keep fields normalized and lean on TypeScript types to validate the shape before rendering.\\n\\n## Recommended workflow\\n\\n- Author drafts live in `app/data/` so they travel with the codebase.\\n- Use composables to fetch and cache JSON on the client.\\n- Generate static pages for each slug to keep Time To First Byte near zero.\\n\\nStoring content locally also makes it easy to seed real data when you decide to introduce a headless CMS later.",
    "authorId": "author-003",
    "category": "Content Strategy",
    "tags": [
      "Content",
      "JSON",
      "Nuxt"
    ],
    "publishedAt": "2025-10-01T08:30:00.000Z",
    "coverImage": "/images/posts/content-workflows-with-local-json/cover.jpg"
  }
]
